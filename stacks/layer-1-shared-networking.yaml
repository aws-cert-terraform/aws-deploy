AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  # The base CIDR range, subnets will need to be within this range
  BaseVPC:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.20.0.0/16

  # subnetA
  PublicCIDROne:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 10.20.0.0/22

  # subnetB
  PublicCIDRTwo:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 10.20.4.0/22

  AvailabilityZoneList:
    Description: List of AZ's to support
    Type: CommaDelimitedList
    Default: us-east-2a,us-east-2b,us-east-2c

# VPC and corresponding resources, this will cost money because of the NAT
# gateways, this can be mitigated by removing the NAT gateway and whitelisting
# IP addresses in the security group
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref BaseVPC
  IGW:
    Type: "AWS::EC2::InternetGateway"

  # An Internet Gateway let's in the cats, does not cost money like a
  # typical NAT gateway does
  GatewayAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  # In the Shared services VPC, we make two subnets, in two AZ's
  SubnetPublicSharedA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicCIDROne
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  SubnetPublicSharedB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicCIDRTwo
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  # The actual route associations, find way to not be manual

  # RouteDefaultPrivateA:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGatewayA
  #     RouteTableId: !Ref RouteTablePrivateA
  # RouteDefaultPrivateB:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGatewayB
  #     RouteTableId: !Ref RouteTablePrivateB

  # A subnet association for each availablity zone
  # https://docs.aws.amazon.com/en_pv/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
  SubnetRouteTableAssociatePublicA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicSharedA
  SubnetRouteTableAssociatePublicB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicSharedB

  # A route table for public and private
  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  RouteDefaultPublic:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RouteTablePublic

  RouteTablePrivateA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  RouteTablePrivateB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  # Setting up a NAT per az
  # EIPNatGWA:
  #   DependsOn: GatewayAttach
  #   Type: "AWS::EC2::EIP"
  #   Properties:
  #     Domain: vpc
  # EIPNatGWB:
  #   DependsOn: GatewayAttach
  #   Type: "AWS::EC2::EIP"
  #   Properties:
  #     Domain: vpc
  # NatGatewayA:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId: !GetAtt EIPNatGWA.AllocationId
  #     SubnetId: !Ref SubnetPublicSharedA
  # NatGatewayB:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId: !GetAtt EIPNatGWB.AllocationId
  #     SubnetId: !Ref SubnetPublicSharedB

Outputs:
  VpcId:
    Description: ID of Shared Infrastructure VPC
    Value: !Ref VPC
    Export: # added to export
      Name:
        Fn::Sub: ${AWS::StackName}-VPC-ID

  CIDR:
    Description: CIDR value of the base vpc
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CidrBlock
  # publicnetA:
  #   Description: ID of Shared Infrastructure VPC
  #   Value: !Ref VPC
  #   Export: # added to export
  #     Name: sharedinf-publicA
  # privateA:
  #   Description: ID of Shared Infrastructure VPC
  #   Value: !Ref VPC
  #   Export: # added to export
  #     Name: sharedinf-privateA

  # natgatewayaid:
  #   Description: ID of NAT Gateway A
  #   Value: !Ref NatGatewayA
  # natgatewaybid:
  #   Description: ID of NAT Gateway B
  #   Value: !Ref NatGatewayB
  AvailabilityZone1:
    Description: Availability Zone 1
    Value:
      Fn::Select:
        - "0"
        - Ref: AvailabilityZoneList
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AZ-1
  PublicRouteA:
    Description: ID of Public Route Table
    Value: !Ref SubnetPublicSharedA
    Export: # added to export
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnetId1
  # privateroutetableb:
  #   Description: ID of Private Route Table - B
  #   Value: !Ref RouteTablePrivateB
  #   Export: # added to export
  #     Name: sharedinf-privatertb
