AWSTemplateFormatVersion: 2010-09-09
Description: Subnet
Parameters:
  IsPublic:
    Description: Whether or not to build public subnets
    Type: String
    AllowedValues: ["Yes", "No"]
    Default: "No"

  GatewayID:
    Description: Whether or not to build public subnets
    Type: String
    Default: ""

  SubnetBits:
    Description: A value to pass to avoid CIDR conflicts
    Type: Number

  EnvID:
    Description: The VPC ID
    Type: String
  EnvCIDR:
    Description: The CIDR range of the parent VPC
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Type: String

  NumberOfAZs:
    Type: String
    AllowedValues:
      - "1"
      - "2"
      - "3"
    Default: "2"
    Description: How many Availability Zones do you wish to utilize?

Conditions:
  Build2: !Not [!Equals [!Ref NumberOfAZs, "1"]]
  Build3: !Equals [!Ref NumberOfAZs, "3"]
  IsPublic: !Equals [!Ref IsPublic, "Yes"]
  IsPrivate: !Equals [!Ref IsPublic, "No"]
  Build2Public:
    "Fn::And":
      - Fn::Equals: [IsPublic, "Yes"]
      - !Not [!Equals [!Ref NumberOfAZs, "1"]]
  Build3Public:
    "Fn::And":
      - Fn::Equals: [IsPublic, "Yes"]
      - !Equals [!Ref NumberOfAZs, "3"]
  Build2Private:
    "Fn::And":
      - Fn::Equals: [IsPublic, "No"]
      - !Not [!Equals [!Ref NumberOfAZs, "1"]]
  Build3Private:
    "Fn::And":
      - Fn::Equals: [IsPublic, "No"]
      - !Equals [!Ref NumberOfAZs, "3"]

  # The CIDR '10.20.0.0/29' is invalid. (Service: AmazonEC2; Status Code: 400; Error Code: InvalidSubnet.Range; Request ID: 6c396996-28d9-4a37-96c0-d253a84fda7a)

Resources:
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EnvID
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Select [0, !Cidr [!Ref EnvCIDR, 1, !Ref SubnetBits]]
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-public-subnet-1
        - "Fn::If":
            - IsPublic
            - Key: network
              Value: public
            - !Ref AWS::NoValue
  Subnet2:
    Type: AWS::EC2::Subnet
    Condition: Build2
    Properties:
      VpcId:
        Ref: EnvID
      AvailabilityZone: !Select [2, !GetAZs ]
      CidrBlock: !Select [0, !Cidr [!Ref EnvCIDR, 1, !Ref SubnetBits]]
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-public-subnet-2
        - "Fn::If":
            - IsPublic
            - Key: network
              Value: public
            - !Ref AWS::NoValue
  Subnet3:
    Type: AWS::EC2::Subnet
    Condition: Build3
    Properties:
      VpcId:
        Ref: EnvID
      AvailabilityZone: !Select [2, !GetAZs ]
      CidrBlock: !Select [0, !Cidr [!Ref EnvCIDR, 3, 8]]
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-public-subnet-2
        - "Fn::If":
            - IsPublic
            - Key: network
              Value: public
            - !Ref AWS::NoValue

  Subnet1Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable1
      SubnetId:
        Ref: Subnet1

  Subnet2Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Build2Private
    Properties:
      RouteTableId: !If [IsPublic, !Ref RouteTable1, !Ref RouteTable2]
      SubnetId:
        Ref: Subnet2

  Subnet3Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Build3Private
    Properties:
      RouteTableId: !If [IsPublic, !Ref RouteTable1, !Ref RouteTable3]
      SubnetId:
        Ref: Subnet3

  NatGatewayEip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGatewayEip2:
    Type: AWS::EC2::EIP
    Condition: Build2Public
    Properties:
      Domain: vpc
  NatGatewayEip3:
    Type: AWS::EC2::EIP
    Condition: Build3Public
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEip1
          - AllocationId
      SubnetId:
        Ref: Subnet1
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: Build2Private
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEip2
          - AllocationId
      SubnetId:
        Ref: Subnet2
  NatGateway3:
    Type: AWS::EC2::NatGateway
    Condition: Build3Private
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEip3
          - AllocationId
      SubnetId:
        Ref: Subnet3
  NatRoute1:
    Type: AWS::EC2::Route
    Condition: IsPrivate
    Properties:
      RouteTableId:
        Ref: RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway1
  NatRoute2:
    Type: AWS::EC2::Route
    Condition: Build2Private
    Properties:
      RouteTableId:
        Ref: RouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway2
  NatRoute3:
    Type: AWS::EC2::Route
    Condition: Build3Private
    Properties:
      RouteTableId:
        Ref: RouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway3

  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EnvID
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-private-route-table-1
        - Key: network
          Value: private
        - Key: primary-az
          Value: !Select [1, !GetAZs ]

  PublicRoute:
    Type: AWS::EC2::Route
    Condition: IsPublic
    Properties:
      RouteTableId:
        Ref: RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: GatewayID

  RouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: Build2Private
    Properties:
      VpcId:
        Ref: EnvID
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-private-route-table-2
        - Key: network
          Value: private
        - Key: primary-az
          Value: !Select [2, !GetAZs ]
  RouteTable3:
    Type: AWS::EC2::RouteTable
    Condition: Build3Private
    Properties:
      VpcId:
        Ref: EnvID
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-private-route-table-3
        - Key: network
          Value: private
        - Key: primary-az
          Value: !Select [2, !GetAZs ]
# Outputs:
# RouteTable1:
#   Value: !Ref RouteTable1
#   Export:
#     Name: RouteTable1
# RouteTable2:
#   Value: !Ref RouteTable2
#   Condition: Build2Private
#   Export:
#     Name: RouteTable3
# RouteTable3:
#   Value: !Ref RouteTable3
#   Condition: Build3Private
#   Export:
#     Name: RouteTable3
